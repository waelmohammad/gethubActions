default_platform(:ios)

DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
PROVISIONING_PROFILE_SPECIFIER = ENV["PROVISIONING_PROFILE_SPECIFIER"]
TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]
APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
APPLE_KEY_CONTENT = ENV["APPLE_KEY_CONTENT"]
GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: false,
    timeout: 0
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

platform :ios do
    desc "My awesome app"
  lane :distribute do
    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)

    api_key = app_store_connect_api_key(
      key_id: APPLE_KEY_ID,
      issuer_id: APPLE_ISSUER_ID,
      key_filepath: "./fastlane/AuthKey_6XKVBG8TY2.p8",            
      duration: 1200,            
      in_house: false
    )

     #  gym
        # build_ios_app is a built-in fastlane action.


  cocoapods(
      clean_install: true
    )

    match(
      type: 'appstore',
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
      readonly: true,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      api_key: api_key
    )

    gym(
      configuration: "Release",
      workspace: "GitHubActions.xcworkspace",
      scheme: "GitHubActions",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: { 
            DEVELOPER_APP_ID => PROVISIONING_PROFILE_SPECIFIER
        }
      }
    )

  # Fetch the commit messages
  commit_messages = sh("git log --pretty=format:'%s' -n 1").split("\n")

  # Join the commit messages to create dynamic release notes
  release_notes = commit_messages.join('\n')

        release = firebase_app_distribution(
            app: "1:622279777854:ios:0bcc281f2099d8fc0e3b6f",
            groups: "testers",
            release_notes: release_notes
        )
  end

lane :increment_build_number_fb do
build_number = get_build_number(xcodeproj: "GitHubActions.xcodeproj")
end 



  lane :deploy_to_firebase do
    # Add any pre-deployment steps here, such as building your iOS app

    # Upload the IPA file to Firebase App Distribution
    firebase_app_distribution(
      app: "1:622279777854:ios:0bcc281f2099d8fc0e3b6f", # Your Firebase App ID
      groups: "testers", # Replace with your distribution group name
      release_notes: "Release notes for this version from Wall",
      ipa_path: "./GitHubActions.ipa"
    )

    # Add any post-deployment steps here
  end

  lane :closed_beta do
    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)

    api_key = app_store_connect_api_key(
      key_id: APPLE_KEY_ID,
      issuer_id: APPLE_ISSUER_ID,
      key_filepath: "./fastlane/AuthKey_6XKVBG8TY2.p8",            
      duration: 1200,            
      in_house: false
    )
    

    increment_build_number(
      build_number: latest_testflight_build_number + 1,
      xcodeproj: "GitHubActions.xcodeproj"
    )
    
    cocoapods(
      clean_install: true
    )

    match(
      type: 'appstore',
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
      readonly: true,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      api_key: api_key
    )

    gym(
      configuration: "Release",
      workspace: "GitHubActions.xcworkspace",
      scheme: "GitHubActions",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: { 
            DEVELOPER_APP_ID => PROVISIONING_PROFILE_SPECIFIER
        }
      }
    )

    pilot(
      apple_id: "#{DEVELOPER_APP_ID}",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      distribute_external: false,
      notify_external_testers: false,
      ipa: "./GitHubActions.ipa"
    )

    delete_temp_keychain(keychain_name)
  end
end